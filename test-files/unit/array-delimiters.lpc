// 数组定界符测试用例
// 本文件测试增强的字符串定界符语法 @@DELIMITER...DELIMITER;

// 基础数组定界符测试
mixed* test_basic_array_delimiters() {
    // 简单的多行数组定义
    mixed* simple_array =
@@ARRAY
item1
item2
item3
ARRAY;

    // 使用不同的定界符标签
    string* config_data =
@@CONFIG
server_name: "test_server"
port: 8080
debug: true
max_users: 100
CONFIG;

    return ({ simple_array, config_data });
}

// 测试复杂的数组定界符
mixed* test_complex_delimiters() {
    // 包含特殊字符的数组
    string* special_content =
@@SPECIAL
This contains "quotes" and 'apostrophes'
And some symbols: @#$%^&*()
Even some code: if (x > 0) return true;
And heredoc markers: @TAG and @@DELIMITER
SPECIAL;

    // 多行配置数据
    mapping config =
@@MULTI_CONFIG
database: {
    host: "localhost",
    port: 3306,
    user: "admin",
    password: "secret"
}
features: {
    logging: enabled,
    cache: disabled,
    security: strict
}
MULTI_CONFIG;

    return ({ special_content, config });
}

// 测试嵌套和复杂结构
mixed test_nested_structures() {
    // 嵌套数组定义
    mixed* nested_data =
@@NESTED
level1: {
    level2: {
        level3: "deep value",
        array: [1, 2, 3, 4, 5]
    },
    another_level2: {
        data: "more data"
    }
}
other_top_level: "top value"
NESTED;

    // SQL查询示例
    string sql_query =
@@SQL
SELECT u.name, u.email, p.title
FROM users u
JOIN posts p ON u.id = p.user_id
WHERE u.active = 1
  AND p.published_at > '2024-01-01'
ORDER BY p.published_at DESC
LIMIT 10;
SQL;

    return ({ nested_data, sql_query });
}

// 测试不同长度的定界符标签
void test_delimiter_variations() {
    // 短标签
    mixed* short_tag =
@@A
content with short tag
A;

    // 长标签
    mixed* long_tag =
@@VERY_LONG_DELIMITER_TAG_NAME
content with very long delimiter tag name
this helps avoid conflicts with content
VERY_LONG_DELIMITER_TAG_NAME;

    // 数字和下划线组合
    mixed* numeric_tag =
@@DATA_2024_V1
version: 2024.1
format: enhanced
compatibility: backward
DATA_2024_V1;
}

// 测试JSON和配置格式
mapping test_config_formats() {
    // JSON格式的配置
    mapping json_config =
@@JSON_CONFIG
{
    "server": {
        "host": "0.0.0.0",
        "port": 8080,
        "ssl": true
    },
    "database": {
        "type": "mysql",
        "host": "db.example.com",
        "credentials": {
            "username": "app_user",
            "password": "secure_password"
        }
    },
    "features": ["logging", "caching", "monitoring"]
}
JSON_CONFIG;

    // YAML风格的配置
    mapping yaml_config =
@@YAML_CONFIG
server:
  host: 0.0.0.0
  port: 8080
  ssl: true

database:
  type: mysql
  host: db.example.com
  credentials:
    username: app_user
    password: secure_password

features:
  - logging
  - caching
  - monitoring
YAML_CONFIG;

    return ([ "json": json_config, "yaml": yaml_config ]);
}

// 测试代码模板
string* test_code_templates() {
    // HTML模板
    string html_template =
@@HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{title}}</title>
</head>
<body>
    <h1>{{header}}</h1>
    <div class="content">
        {{content}}
    </div>
</body>
</html>
HTML;

    // CSS样式
    string css_styles =
@@CSS
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.header {
    background-color: #333;
    color: white;
    padding: 1rem;
    border-radius: 4px;
}

.content {
    margin-top: 2rem;
    line-height: 1.6;
}

@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
}
CSS;

    return ({ html_template, css_styles });
}

// 测试多语言代码片段
mixed* test_multi_language_code() {
    // JavaScript代码
    string javascript =
@@JAVASCRIPT
function calculateTotal(items) {
    return items.reduce((total, item) => {
        return total + (item.price * item.quantity);
    }, 0);
}

const cart = [
    { name: "Apple", price: 1.50, quantity: 3 },
    { name: "Banana", price: 0.75, quantity: 6 }
];

console.log("Total:", calculateTotal(cart));
JAVASCRIPT;

    // Python代码
    string python =
@@PYTHON
def process_data(data_list):
    """Process a list of data items."""
    processed = []
    for item in data_list:
        if isinstance(item, dict):
            processed.append({
                'id': item.get('id'),
                'value': item.get('value', 0) * 2,
                'processed': True
            })
    return processed

# Example usage
raw_data = [
    {'id': 1, 'value': 10},
    {'id': 2, 'value': 20},
    {'id': 3, 'value': 30}
]

result = process_data(raw_data)
print(f"Processed {len(result)} items")
PYTHON;

    return ({ javascript, python });
}

// 边界条件测试
void test_delimiter_edge_cases() {
    // 空内容
    mixed* empty_content =
@@EMPTY
EMPTY;

    // 仅包含空白
    mixed* whitespace_only =
@@WHITESPACE



WHITESPACE;

    // 包含定界符标签但不匹配
    mixed* tag_mismatch_content =
@@CONTENT
This contains the word CONTENT but it's not the end marker
It also contains @@CONTENT but still not the end
Only the exact match on its own line ends the block
CONTENT;
}