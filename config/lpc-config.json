{
    "types": [
        "int", "string", "array", "object", "mapping",
        "function", "float", "buffer", "class","void"
    ],
    "modifiers": [
        "private", "public", "protected", "nosave", "static",
        "nomask", "varargs"
    ],
    "efuns": {
        "allocate": { "snippet": "allocate(${1:size})", "detail": "创建指定大小的数组" },
        "arrayp": { "snippet": "arrayp(${1:arg})", "detail": "检查变量是否为数组" },
        "element_of": { "snippet": "element_of(${1:arr}, ${2:elm})", "detail": "检查元素是否在数组中" },
        "filter_array": { "snippet": "filter_array(${1:arr}, ${2:fun}, ${3:obj})", "detail": "过滤数组" },
        "map_array": { "snippet": "map_array(${1:arr}, ${2:fun}, ${3:obj})", "detail": "映射数组" },
        "member_array": { "snippet": "member_array(${1:item}, ${2:arr})", "detail": "查找数组元素位置" },
        "pointerp": { "snippet": "pointerp(${1:arg})", "detail": "检查变量是否为指针" },
        "shuffle": { "snippet": "shuffle(${1:arr})", "detail": "随机打乱数组" },
        "sort_array": { "snippet": "sort_array(${1:arr}, ${2:fun})", "detail": "排序数组" },
        "unique_array": { "snippet": "unique_array(${1:arr}, ${2:fun})", "detail": "数组去重" },

        "allocate_buffer": { "snippet": "allocate_buffer(${1:size})", "detail": "创建指定大小的缓冲区" },
        "bufferp": { "snippet": "bufferp(${1:arg})", "detail": "检查变量是否为缓冲区" },
        "read_buffer": { "snippet": "read_buffer(${1:file}, ${2:start}, ${3:len})", "detail": "读取缓冲区" },
        "write_buffer": { "snippet": "write_buffer(${1:file}, ${2:buffer})", "detail": "写入缓冲区" },

        "call_other": { "snippet": "call_other(${1:obj}, ${2:fun}, ${3:args})", "detail": "调用其他对象的函数" },
        "call_out": { "snippet": "call_out(${1:fun}, ${2:delay}, ${3:args})", "detail": "延迟调用函数" },
        "catch": { "snippet": "catch(${1:expr})", "detail": "捕获错误" },
        "throw": { "snippet": "throw(${1:value})", "detail": "抛出异常" },
        "call_out_walltime": { "snippet": "call_out_walltime(${1:fun}, ${2:delay})", "detail": "使用真实时间延迟调用" },
        "call_stack": { "snippet": "call_stack(${1:flag})", "detail": "获取调用堆栈" },
        "origin": { "snippet": "origin()", "detail": "获取函数调用来源" },
        "previous_object": { "snippet": "previous_object(${1:n})", "detail": "获取调用链中的前一个对象" },
        "query_shadowing": { "snippet": "query_shadowing(${1:ob})", "detail": "检查对象是否被投影" },
        "remove_call_out": { "snippet": "remove_call_out(${1:fun})", "detail": "移除延迟调用" },

        "db_connect": { "snippet": "db_connect(${1:host}, ${2:db})", "detail": "连接数据库" },
        "db_exec": { "snippet": "db_exec(${1:handle}, ${2:sql})", "detail": "执行SQL语句" },
        "db_fetch": { "snippet": "db_fetch(${1:handle})", "detail": "获取查询结果" },
        "db_close": { "snippet": "db_close(${1:handle})", "detail": "关闭数据库连接" },
        "async_db_exec": { "snippet": "async_db_exec(${1:handle}, ${2:sql})", "detail": "异步执行SQL语句" },
        "db_commit": { "snippet": "db_commit(${1:handle})", "detail": "提交数据库事务" },
        "db_rollback": { "snippet": "db_rollback(${1:handle})", "detail": "回滚数据库事务" },
        "db_status": { "snippet": "db_status()", "detail": "获取数据库状态" },
        "read_file": { "snippet": "read_file(${1:file})", "detail": "读取文件内容" },
        "write_file": { "snippet": "write_file(${1:file}, ${2:str})", "detail": "写入文件内容" },
        "file_size": { "snippet": "file_size(${1:file})", "detail": "获取文件大小" },
        "get_dir": { "snippet": "get_dir(${1:path})", "detail": "获取目录内容" },
        "mkdir": { "snippet": "mkdir(${1:dir})", "detail": "创建目录" },
        "rm": { "snippet": "rm(${1:file})", "detail": "删除文件" },
        "rmdir": { "snippet": "rmdir(${1:dir})", "detail": "删除目录" },
        "async_getdir": { "snippet": "async_getdir(${1:path})", "detail": "异步获取目录内容" },
        "async_read": { "snippet": "async_read(${1:file}, ${2:callback})", "detail": "异步读取文件" },
        "async_write": { "snippet": "async_write(${1:file}, ${2:str}, ${3:callback})", "detail": "异步写入文件" },
        "cp": { "snippet": "cp(${1:src}, ${2:dst})", "detail": "复制文件" },
        "link": { "snippet": "link(${1:src}, ${2:dst})", "detail": "创建链接" },
        "rename": { "snippet": "rename(${1:src}, ${2:dst})", "detail": "重命名文件" },
        "stat": { "snippet": "stat(${1:file})", "detail": "获取文件状态" },
        "cos": { "snippet": "cos(${1:x})", "detail": "计算余弦值" },
        "sin": { "snippet": "sin(${1:x})", "detail": "计算正弦值" },
        "tan": { "snippet": "tan(${1:x})", "detail": "计算正切值" },
        "sqrt": { "snippet": "sqrt(${1:x})", "detail": "计算平方根" },
        "pow": { "snippet": "pow(${1:x}, ${2:y})", "detail": "计算幂" },
        "floor": { "snippet": "floor(${1:x})", "detail": "向下取整" },
        "ceil": { "snippet": "ceil(${1:x})", "detail": "向上取整" },
        "acos": { "snippet": "acos(${1:x})", "detail": "计算反余弦值" },
        "angle": { "snippet": "angle(${1:x}, ${2:y})", "detail": "计算角度" },
        "asin": { "snippet": "asin(${1:x})", "detail": "计算反正弦值" },
        "atan": { "snippet": "atan(${1:x})", "detail": "计算反正切值" },
        "distance": { "snippet": "distance(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "detail": "计算两点距离" },
        "dotprod": { "snippet": "dotprod(${1:arr1}, ${2:arr2})", "detail": "计算点积" },
        "exp": { "snippet": "exp(${1:x})", "detail": "计算e的幂" },
        "floatp": { "snippet": "floatp(${1:arg})", "detail": "检查是否为浮点数" },
        "log": { "snippet": "log(${1:x})", "detail": "计算自然对数" },
        "log2": { "snippet": "log2(${1:x})", "detail": "计算以2为底的对数" },
        "log10": { "snippet": "log10(${1:x})", "detail": "计算以10为底的对数" },
        "norm": { "snippet": "norm(${1:arr})", "detail": "计算向量范数" },
        "to_int": { "snippet": "to_int(${1:x})", "detail": "转换为整数" },

        "allocate_mapping": { "snippet": "allocate_mapping(${1:size})", "detail": "创建映射" },
        "keys": { "snippet": "keys(${1:mapping})", "detail": "获取映射的键数组" },
        "values": { "snippet": "values(${1:mapping})", "detail": "获取映射的值数组" },
        "map_delete": { "snippet": "map_delete(${1:mapping}, ${2:key})", "detail": "删除映射元素" },

        "find_living": { "snippet": "find_living(${1:str})", "detail": "查找活着的对象" },
        "set_living_name": { "snippet": "set_living_name(${1:str})", "detail": "设置生物名称" },
        "living": { "snippet": "living(${1:ob})", "detail": "检查对象是否活着" },
        "set_light": { "snippet": "set_light(${1:x})", "detail": "设置光照" },


        "clone_object": { "snippet": "clone_object(${1:file})", "detail": "克隆对象" },
        "destruct": { "snippet": "destruct(${1:ob})", "detail": "销毁对象" },
        "environment": { "snippet": "environment(${1:ob})", "detail": "获取对象环境" },
        "present": { "snippet": "present(${1:str}, ${2:ob})", "detail": "查找附近对象" },
        "move_object": { "snippet": "move_object(${1:dest})", "detail": "移动对象" },
        "this_object": { "snippet": "this_object()", "detail": "获取当前对象" },
        "this_player": { "snippet": "this_player()", "detail": "获取当前玩家" },

        "capitalize": { "snippet": "capitalize(${1:str})", "detail": "首字母大写" },
        "explode": { "snippet": "explode(${1:str}, ${2:delimiter})", "detail": "分割字符串" },
        "implode": { "snippet": "implode(${1:arr}, ${2:delimiter})", "detail": "连接数组为字符串" },
        "sprintf": { "snippet": "sprintf(${1:format}, ${2:args})", "detail": "格式化字符串" },
        "sscanf": { "snippet": "sscanf(${1:str}, ${2:format}, ${3:args})", "detail": "解析字符串" },
        "strlen": { "snippet": "strlen(${1:str})", "detail": "获取字符串长度" },
        "strsrch": { "snippet": "strsrch(${1:str}, ${2:pattern})", "detail": "查找子字符串" },
        "ctime": { "snippet": "ctime(${1:time})", "detail": "转换时间为字符串" },
        "time": { "snippet": "time()", "detail": "获取当前时间" },
        "uptime": { "snippet": "uptime()", "detail": "获取系统运行时间" },
        "shutdown": { "snippet": "shutdown(${1:code})", "detail": "关闭MUD" },

        "abs": { "snippet": "abs(${1:x})", "detail": "取绝对值" },
        "base_name": { "snippet": "base_name(${1:ob})", "detail": "获取对象基础名称" },
        "copy": { "snippet": "copy(${1:arr})", "detail": "复制数组或映射" },
        "max": { "snippet": "max(${1:x}, ${2:y})", "detail": "取最大值" },
        "min": { "snippet": "min(${1:x}, ${2:y})", "detail": "取最小值" },
        "pluralize": { "snippet": "pluralize(${1:str})", "detail": "将单词变为复数形式" },

        "assemble_class": { "snippet": "assemble_class(${1:arr})", "detail": "从数组创建类实例" },
        "classes": { "snippet": "classes(${1:obj})", "detail": "获取对象的类列表" },
        "classp": { "snippet": "classp(${1:arg})", "detail": "检查变量是否为类" },
        "disassemble_class": { "snippet": "disassemble_class(${1:obj})", "detail": "将类实例转换为数组" },
        "fetch_class_member": { "snippet": "fetch_class_member(${1:obj}, ${2:index})", "detail": "获取类成员" },
        "store_class_member": { "snippet": "store_class_member(${1:obj}, ${2:index}, ${3:value})", "detail": "设置类成员" },

        "ed": { "snippet": "ed(${1:file})", "detail": "启动在线编辑器" },
        "ed_cmd": { "snippet": "ed_cmd(${1:cmd})", "detail": "执行编辑器命令" },
        "ed_start": { "snippet": "ed_start(${1:file})", "detail": "开始编辑文件" },

        "bind": { "snippet": "bind(${1:fun}, ${2:obj})", "detail": "绑定函数到对象" },
        "defer": { "snippet": "defer(${1:fun})", "detail": "延迟执行函数" },
        "evaluate": { "snippet": "evaluate(${1:fun}, ${2:args})", "detail": "执行函数" },
        "functionp": { "snippet": "functionp(${1:arg})", "detail": "检查变量是否为函数" },

        "filter": { "snippet": "filter(${1:arr}, ${2:fun})", "detail": "过滤数组或映射" },
        "map": { "snippet": "map(${1:arr}, ${2:fun})", "detail": "映射数组或映射" },
        "nullp": { "snippet": "nullp(${1:arg})", "detail": "检查变量是否为空" },
        "restore_variable": { "snippet": "restore_variable(${1:str})", "detail": "从字符串还原变量" },
        "save_variable": { "snippet": "save_variable(${1:var})", "detail": "将变量保存为字符串" },
        "sizeof": { "snippet": "sizeof(${1:arr})", "detail": "获取数组或映射大小" },
        "typeof": { "snippet": "typeof(${1:arg})", "detail": "获取变量类型" },
        "add_action": { "snippet": "add_action(${1:fun}, ${2:cmd})", "detail": "添加命令处理函数" },
        "disable_commands": { "snippet": "disable_commands()", "detail": "禁用命令处理" },
        "enable_commands": { "snippet": "enable_commands()", "detail": "启用命令处理" },
        "find_player": { "snippet": "find_player(${1:name})", "detail": "查找玩家" },
        "get_char": { "snippet": "get_char(${1:fun})", "detail": "获取单个字符输入" },
        "input_to": { "snippet": "input_to(${1:fun})", "detail": "获取一行输入" },
        "query_ip_name": { "snippet": "query_ip_name(${1:ob})", "detail": "获取IP地址的主机名" },
        "query_ip_number": { "snippet": "query_ip_number(${1:ob})", "detail": "获取IP地址" },
        "command": { "snippet": "command(${1:str})", "detail": "执行命令" },
        "commands": { "snippet": "commands()", "detail": "获取所有可用命令" },
        "disable_wizard": { "snippet": "disable_wizard()", "detail": "禁用巫师权限" },
        "enable_wizard": { "snippet": "enable_wizard()", "detail": "启用巫师权限" },
        "exec": { "snippet": "exec(${1:ob1}, ${2:ob2})", "detail": "切换对象连接" },
        "in_edit": { "snippet": "in_edit(${1:ob})", "detail": "检查是否在编辑状态" },
        "in_input": { "snippet": "in_input(${1:ob})", "detail": "检查是否在输入状态" },
        "interactive": { "snippet": "interactive(${1:ob})", "detail": "检查是否为交互对象" },
        "message": { "snippet": "message(${1:class}, ${2:msg}, ${3:ob})", "detail": "发送消息" },
        "notify_fail": { "snippet": "notify_fail(${1:msg})", "detail": "设置失败消息" },
        "printf": { "snippet": "printf(${1:fmt}, ${2:args})", "detail": "格式化输出" },
        "query_encoding": { "snippet": "query_encoding(${1:ob})", "detail": "获取字符编码" },
        "query_host_name": { "snippet": "query_host_name(${1:ob})", "detail": "获取主机名" },
        "query_idle": { "snippet": "query_idle(${1:ob})", "detail": "获取空闲时间" },
        "query_snoop": { "snippet": "query_snoop(${1:ob})", "detail": "获取监听对象" },
        "query_snooping": { "snippet": "query_snooping(${1:ob})", "detail": "获取被监听对象" },
        "receive": { "snippet": "receive(${1:msg})", "detail": "接收消息" },
        "remove_action": { "snippet": "remove_action(${1:verb})", "detail": "移除命令" },
        "remove_interactive": { "snippet": "remove_interactive(${1:ob})", "detail": "移除交互状态" },
        "resolve": { "snippet": "resolve(${1:addr}, ${2:callback})", "detail": "解析地址" },
        "set_encoding": { "snippet": "set_encoding(${1:encoding})", "detail": "设置字符编码" },
        "set_this_player": { "snippet": "set_this_player(${1:ob})", "detail": "设置当前玩家" },
        "shout": { "snippet": "shout(${1:msg})", "detail": "广播消息" },
        "snoop": { "snippet": "snoop(${1:snooper}, ${2:snoopee})", "detail": "监听对象" },
        "telnet_ga": { "snippet": "telnet_ga()", "detail": "发送Telnet GA信号" },
        "telnet_msp_oob": { "snippet": "telnet_msp_oob(${1:msg})", "detail": "发送MSP带外数据" },
        "telnet_nop": { "snippet": "telnet_nop()", "detail": "发送Telnet NOP信号" },
        "this_interactive": { "snippet": "this_interactive()", "detail": "获取当前交互对象" },
        "this_user": { "snippet": "this_user()", "detail": "获取当前用户" },
        "userp": { "snippet": "userp(${1:ob})", "detail": "检查是否为用户对象" },
        "users": { "snippet": "users()", "detail": "获取所有用户" },
        "wizardp": { "snippet": "wizardp(${1:ob})", "detail": "检查是否为巫师" },
        "debug_message": { "snippet": "debug_message(${1:str})", "detail": "输出调试信息" },
        "dump_prog": { "snippet": "dump_prog(${1:ob})", "detail": "输出对象程序信息" },
        "memory_info": { "snippet": "memory_info()", "detail": "获取内存使用信息" },
        "rusage": { "snippet": "rusage()", "detail": "获取资源使用信息" },
        "pcre_match": { "snippet": "pcre_match(${1:str}, ${2:pattern})", "detail": "正则表达式匹配" },
        "pcre_replace": { "snippet": "pcre_replace(${1:str}, ${2:pattern}, ${3:replace})", "detail": "正则表达式替换" },
        "pcre_extract": { "snippet": "pcre_extract(${1:str}, ${2:pattern})", "detail": "正则表达式提取" },

        "socket_create": { "snippet": "socket_create(${1:type}, ${2:fun})", "detail": "创建套接字" },
        "socket_bind": { "snippet": "socket_bind(${1:fd}, ${2:port})", "detail": "绑定套接字" },
        "socket_listen": { "snippet": "socket_listen(${1:fd}, ${2:fun})", "detail": "监听连接" },
        "socket_accept": { "snippet": "socket_accept(${1:fd}, ${2:fun})", "detail": "接受连接" },
        "socket_write": { "snippet": "socket_write(${1:fd}, ${2:data})", "detail": "写入数据" },
        "socket_close": { "snippet": "socket_close(${1:fd})", "detail": "关闭套接字" },
        "trim": { "snippet": "trim(${1:str})", "detail": "去除字符串两端空白" },
        "ltrim": { "snippet": "ltrim(${1:str})", "detail": "去除字符串左端空白" },
        "rtrim": { "snippet": "rtrim(${1:str})", "detail": "去除字符串右端空白" },
        "replace_string": { "snippet": "replace_string(${1:str}, ${2:old}, ${3:new})", "detail": "替换字符串" },
        "regexp": { "snippet": "regexp(${1:str}, ${2:pattern})", "detail": "正则表达式匹配" },
        "reg_assoc": { "snippet": "reg_assoc(${1:str}, ${2:patterns}, ${3:tokens})", "detail": "正则表达式关联" },
        "dump_trace": { "snippet": "dump_trace()", "detail": "输出调用堆栈" },
        "eval_cost": { "snippet": "eval_cost()", "detail": "获取执行成本" },
        "reset_eval_cost": { "snippet": "reset_eval_cost()", "detail": "重置执行成本" },
        "set_eval_limit": { "snippet": "set_eval_limit(${1:limit})", "detail": "设置执行限制" },

        "heart_beats": { "snippet": "heart_beats()", "detail": "获取所有心跳对象" },
        "memory_summary": { "snippet": "memory_summary()", "detail": "获取内存使用摘要" },
        "network_stats": { "snippet": "network_stats()", "detail": "获取网络统计信息" },
        "query_charmode": { "snippet": "query_charmode(${1:ob})", "detail": "查询字符模式" },
        "query_ip_port": { "snippet": "query_ip_port(${1:ob})", "detail": "查询IP端口" },
        "real_time": { "snippet": "real_time()", "detail": "获取真实时间" },
        "set_reset": { "snippet": "set_reset(${1:time})", "detail": "设置重置时间" },
        "query_load_average": { "snippet": "query_load_average()", "detail": "查询系统负载" },
        "reclaim_objects": { "snippet": "reclaim_objects()", "detail": "回收对象" },
        "reload_object": { "snippet": "reload_object(${1:ob})", "detail": "重新加载对象" },
        "set_malloc_mask": { "snippet": "set_malloc_mask(${1:mask})", "detail": "设置内存分配掩码" },
        "swap": { "snippet": "swap(${1:ob})", "detail": "交换对象到磁盘" },
        "cache_stats": { "snippet": "cache_stats()", "detail": "获取缓存统计信息" },
    
        "trace": { "snippet": "trace(${1:traceflags})", "detail": "设置跟踪标志" },
        "traceprefix": { "snippet": "traceprefix(${1:prefix})", "detail": "设置跟踪前缀" },
        
        "valid_write": { "snippet": "valid_write(${1:file}, ${2:user}, ${3:func})", "detail": "验证写入权限" },
        "valid_read": { "snippet": "valid_read(${1:file}, ${2:user}, ${3:func})", "detail": "验证读取权限" },
        "export_uid": { "snippet": "export_uid(${1:ob})", "detail": "导出用户ID" },
        "geteuid": { "snippet": "geteuid(${1:ob})", "detail": "获取有效用户ID" },
        "getuid": { "snippet": "getuid(${1:ob})", "detail": "获取用户ID" },
        "seteuid": { "snippet": "seteuid(${1:str})", "detail": "设置有效用户ID" },
        
        "master": { "snippet": "master()", "detail": "获取主控对象" },
        "query_invis": { "snippet": "query_invis(${1:ob})", "detail": "查询隐身状态" },
        "set_hide": { "snippet": "set_hide(${1:flag})", "detail": "设置隐藏状态" },
        "virtualp": { "snippet": "virtualp(${1:ob})", "detail": "检查是否为虚拟对象" },
        
        "break_string": { "snippet": "break_string(${1:str}, ${2:width})", "detail": "按宽度断行" },
        "clear_bit": { "snippet": "clear_bit(${1:str}, ${2:n})", "detail": "清除位" },
        "crypt": { "snippet": "crypt(${1:str}, ${2:seed})", "detail": "字符串加密" },
        "fetch_variable": { "snippet": "fetch_variable(${1:str})", "detail": "获取变量值" },
        "function_exists": { "snippet": "function_exists(${1:str}, ${2:ob})", "detail": "检查函数是否存在" },
        "inherits": { "snippet": "inherits(${1:str}, ${2:ob})", "detail": "检查是否继承" },
        "program_info": { "snippet": "program_info(${1:ob})", "detail": "获取程序信息" },
        "query_heart_beat": { "snippet": "query_heart_beat(${1:ob})", "detail": "查询心跳状态" },
        "restore_object": { "snippet": "restore_object(${1:file})", "detail": "从文件还原对象" },
        "save_object": { "snippet": "save_object(${1:file})", "detail": "保存对象到文件" },
        "set_bit": { "snippet": "set_bit(${1:str}, ${2:n})", "detail": "设置位" },
        "set_heart_beat": { "snippet": "set_heart_beat(${1:flag})", "detail": "设置心跳" },
        "store_variable": { "snippet": "store_variable(${1:var}, ${2:value})", "detail": "存储变量值" },
        "test_bit": { "snippet": "test_bit(${1:str}, ${2:n})", "detail": "测试位" }
    }
} 