{
  "id": "snapshot_1758721930746_owjl1hnl8",
  "approvalId": "approval_1758721930741_zewha5epf",
  "approvalTitle": "LPC Support Technology Stack Document",
  "version": 1,
  "timestamp": "2025-09-24T13:52:10.746Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack: LPC Support Extension\r\n\r\n## Project Type\r\n\r\n**VS Code Language Extension** - 专业的集成开发环境扩展，为LPC编程语言提供现代化的开发工具支持，包括语法分析、智能补全、错误诊断、远程编译等完整IDE功能。\r\n\r\n## Core Technologies\r\n\r\n### Primary Language(s)\r\n- **Language**: TypeScript 5.0+ (严格模式)\r\n- **Runtime**: Node.js (VS Code Extension Host环境)\r\n- **Build Tools**:\r\n  - esbuild (高性能打包编译)\r\n  - TypeScript Compiler (类型检查)\r\n  - antlr4ts-cli (语法解析器生成)\r\n\r\n### Key Dependencies/Libraries\r\n\r\n#### 核心框架依赖\r\n- **@types/vscode ^1.95.0**: VS Code扩展API类型定义\r\n- **vscode Engine ^1.80.0**: VS Code扩展运行时最低版本要求\r\n\r\n#### 语法解析引擎\r\n- **antlr4ts ^0.5.0-alpha.4**: ANTLR4 TypeScript运行时，提供专业语法解析能力\r\n- **antlr4ts-cli ^0.5.0-alpha.4**: ANTLR4语法生成器，从.g4文件生成TypeScript解析器\r\n\r\n#### 网络与数据处理\r\n- **axios ^1.12.1**: HTTP客户端，用于FluffOS服务器通信和在线文档获取\r\n- **cheerio ^1.0.0-rc.12**: 服务器端DOM解析，用于在线文档内容提取和处理\r\n\r\n#### 开发与测试工具\r\n- **jest ^29.7.0**: 单元测试框架\r\n- **ts-jest ^29.1.1**: Jest的TypeScript支持\r\n- **@vscode/test-electron ^2.3.8**: VS Code扩展集成测试框架\r\n\r\n### Application Architecture\r\n\r\n**Language Server Protocol (LSP) 风格架构** + **Provider模式**：\r\n\r\n- **Extension Host**: VS Code扩展主进程，负责生命周期管理和API注册\r\n- **Provider Pattern**: 各功能模块实现VS Code标准Provider接口\r\n- **AST-Driven Architecture**: 基于ANTLR4语法树的深度语言理解\r\n- **Event-Driven**: 响应VS Code编辑器事件和用户交互\r\n- **Modular Plugin System**: 功能模块化，支持独立开发和测试\r\n\r\n### Data Storage\r\n- **Primary Storage**:\r\n  - VS Code Settings (用户配置持久化)\r\n  - 文件系统缓存 (AST解析结果缓存)\r\n  - 内存缓存 (符号表、解析树)\r\n- **Caching Strategy**:\r\n  - 解析结果LRU缓存 (提升大文件性能)\r\n  - 符号索引增量更新\r\n  - 配置热更新机制\r\n- **Data Formats**:\r\n  - JSON (配置文件、文档数据)\r\n  - ANTLR4 ParseTree (语法树)\r\n  - VS Code TextEdit (代码修改指令)\r\n\r\n### External Integrations\r\n\r\n#### FluffOS MUD服务器集成\r\n- **Protocol**: HTTP/HTTPS RESTful API\r\n- **Authentication**: 基于Token或Basic Auth的服务器认证\r\n- **功能**: 远程编译、错误诊断、文件同步\r\n\r\n#### 在线文档服务\r\n- **APIs**: FluffOS官方文档API、GitHub Raw API\r\n- **Protocol**: HTTPS GET请求\r\n- **数据格式**: HTML解析、Markdown处理\r\n\r\n#### AI服务集成\r\n- **GLM-4 API**: 智能代码注释生成\r\n- **Authentication**: API Key认证\r\n- **Protocol**: HTTPS POST (JSON payload)\r\n\r\n## Development Environment\r\n\r\n### Build & Development Tools\r\n- **Build System**:\r\n  - npm scripts (任务编排)\r\n  - esbuild (快速打包，支持增量编译)\r\n  - TypeScript compiler (类型检查)\r\n- **Package Management**: npm (Node.js标准包管理器)\r\n- **Development Workflow**:\r\n  - Watch模式开发 (文件变更自动重编译)\r\n  - VS Code Extension Development Host (调试环境)\r\n  - 热重载支持 (开发时扩展自动重载)\r\n\r\n### Code Quality Tools\r\n- **Static Analysis**:\r\n  - TypeScript严格模式 (完整类型检查)\r\n  - ESLint规则 (代码风格和质量检查)\r\n- **Testing Framework**:\r\n  - Jest (单元测试)\r\n  - VS Code Test Runner (集成测试)\r\n  - Coverage报告 (测试覆盖率)\r\n- **Documentation**:\r\n  - TSDoc注释 (API文档生成)\r\n  - README.md (用户文档)\r\n  - CHANGELOG.md (版本更新记录)\r\n\r\n### Version Control & Collaboration\r\n- **VCS**: Git\r\n- **Branching Strategy**: GitHub Flow (feature branches + main)\r\n- **Code Review Process**:\r\n  - Pull Request工作流\r\n  - 自动化CI检查 (测试、构建、类型检查)\r\n  - Code Review必需审批\r\n\r\n### Extension Development Specifics\r\n- **Debug Configuration**: VS Code launch.json配置\r\n- **Extension Packaging**: vsce (Visual Studio Code Extension manager)\r\n- **Market Distribution**: VS Code Marketplace自动发布\r\n- **Version Management**: 语义化版本控制 (semantic versioning)\r\n\r\n## Deployment & Distribution\r\n\r\n### Target Platform(s)\r\n- **Primary**: VS Code Desktop (Windows, macOS, Linux)\r\n- **Secondary**: VS Code Web (有限功能支持)\r\n- **Architecture Support**: x64, ARM64 (跟随VS Code支持)\r\n\r\n### Distribution Method\r\n- **主要渠道**: VS Code Marketplace (官方扩展商店)\r\n- **安装方式**:\r\n  - GUI: VS Code扩展面板搜索安装\r\n  - CLI: `code --install-extension ludexiang.lpc-support`\r\n  - 手动: .vsix文件本地安装\r\n\r\n### Installation Requirements\r\n- **必需**: VS Code 1.80.0或更高版本\r\n- **推荐**: Node.js 16+ (用于开发和高级功能)\r\n- **可选**: FluffOS MUD服务器 (远程编译功能)\r\n\r\n### Update Mechanism\r\n- **自动更新**: VS Code扩展自动更新机制\r\n- **版本策略**: 主版本.次版本.补丁版本\r\n- **发布频率**: 月度功能更新 + 及时bug修复\r\n\r\n## Technical Requirements & Constraints\r\n\r\n### Performance Requirements\r\n- **启动时间**: 扩展激活时间 < 2秒\r\n- **响应时间**:\r\n  - 代码补全响应 < 100ms\r\n  - 语法高亮更新 < 50ms\r\n  - 错误诊断更新 < 500ms\r\n- **内存使用**:\r\n  - 基础功能 < 50MB\r\n  - 大型项目缓存 < 200MB\r\n- **文件处理**: 支持10MB+的大型LPC文件\r\n\r\n### Compatibility Requirements\r\n- **VS Code版本**: 1.80.0+ (保持向前兼容)\r\n- **Node.js版本**: 16+ (Extension Host要求)\r\n- **操作系统**: Windows 10+, macOS 10.15+, Linux (主流发行版)\r\n- **LPC方言支持**: FluffOS (主要), LDMudlib (计划), MudOS (兼容)\r\n\r\n### Security & Compliance\r\n- **数据隐私**:\r\n  - 用户代码不上传至第三方服务\r\n  - 配置数据本地存储\r\n  - 远程编译仅传输必要代码片段\r\n- **Network Security**:\r\n  - HTTPS强制加密通信\r\n  - 服务器证书验证\r\n  - 用户Token安全存储\r\n\r\n### Scalability & Reliability\r\n- **项目规模**: 支持1000+文件的大型MUD项目\r\n- **并发处理**: 多文件并行解析和分析\r\n- **错误恢复**: 语法错误不影响其他功能正常运行\r\n- **缓存策略**: 智能缓存管理，避免内存泄漏\r\n\r\n## Technical Decisions & Rationale\r\n\r\n### Decision Log\r\n\r\n1. **ANTLR4 vs 正则表达式语法分析**\r\n   - **选择**: ANTLR4语法解析器\r\n   - **理由**: 提供精确的语法树，支持复杂语言特性分析，可扩展性强\r\n   - **权衡**: 增加了复杂度但获得了专业级语言支持能力\r\n\r\n2. **TypeScript严格模式**\r\n   - **选择**: 启用strict模式\r\n   - **理由**: 确保类型安全，减少运行时错误，提升代码质量\r\n   - **权衡**: 开发时间略增但长期维护成本显著降低\r\n\r\n3. **esbuild vs Webpack打包**\r\n   - **选择**: esbuild作为主要打包工具\r\n   - **理由**: 编译速度快10-100倍，配置简单，满足扩展打包需求\r\n   - **权衡**: 生态相对较新但性能优势明显\r\n\r\n4. **Provider模式架构**\r\n   - **选择**: 采用VS Code标准Provider接口\r\n   - **理由**: 与VS Code生态完美集成，功能模块化，便于测试和维护\r\n   - **权衡**: 需要理解VS Code API但获得了标准化的扩展架构\r\n\r\n5. **缓存策略设计**\r\n   - **选择**: 多层缓存 (内存+文件系统)\r\n   - **理由**: 平衡性能和资源消耗，支持大型项目\r\n   - **权衡**: 缓存管理复杂度增加但用户体验显著提升\r\n\r\n## Known Limitations\r\n\r\n- **WebAssembly支持**: ANTLR4 TypeScript版本尚不支持WASM，无法在VS Code Web版本中完整运行\r\n- **多线程解析**: 受Node.js单线程限制，超大项目解析可能阻塞UI线程\r\n- **内存优化**: 大型项目的符号表和AST缓存可能占用较多内存\r\n- **方言兼容性**: 目前主要针对FluffOS，其他LPC方言支持有待完善\r\n- **离线功能**: 部分功能（在线文档、AI助手）需要网络连接\r\n\r\n### 技术债务和改进计划\r\n- **性能优化**: 计划引入Worker线程处理大文件解析\r\n- **内存管理**: 实现更智能的缓存淘汰策略\r\n- **Web支持**: 探索ANTLR4 Web版本或替代方案\r\n- **多语言支持**: 扩展支持更多LPC方言和相关语言",
  "fileStats": {
    "size": 8306,
    "lines": 217,
    "lastModified": "2025-09-24T13:52:03.153Z"
  },
  "comments": []
}