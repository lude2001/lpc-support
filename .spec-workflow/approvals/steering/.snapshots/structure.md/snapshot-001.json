{
  "id": "snapshot_1758722103622_wlr3pn71d",
  "approvalId": "approval_1758722103611_bqezoexct",
  "approvalTitle": "LPC Support Project Structure Document",
  "version": 1,
  "timestamp": "2025-09-24T13:55:03.622Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Project Structure: LPC Support Extension\r\n\r\n## Directory Organization\r\n\r\n```\r\nlpc-support/                        # VS Code扩展根目录\r\n├── .spec-workflow/                 # 规范工作流文档 (新增)\r\n│   ├── templates/                  # 文档模板\r\n│   ├── specs/                      # 功能规范文档\r\n│   │   └── lpc-code-formatter/     # 格式化功能规范\r\n│   └── steering/                   # 项目指导文档\r\n│       ├── product.md              # 产品愿景\r\n│       ├── tech.md                 # 技术架构\r\n│       └── structure.md            # 项目结构\r\n├── src/                            # TypeScript源代码\r\n│   ├── antlr/                      # ANTLR4生成的解析器\r\n│   ├── ast/                        # 抽象语法树管理\r\n│   ├── collectors/                 # 代码分析收集器\r\n│   ├── parser/                     # 解析器工具\r\n│   ├── types/                      # 类型定义\r\n│   ├── utils/                      # 通用工具函数\r\n│   ├── test/                       # 测试相关文件\r\n│   └── *.ts                        # 核心功能模块\r\n├── grammar/                        # ANTLR4语法定义\r\n│   ├── LPCLexer.g4                 # 词法分析器语法\r\n│   └── LPCParser.g4                # 语法分析器语法\r\n├── tests/                          # 测试套件\r\n├── syntaxes/                       # TextMate语法高亮\r\n├── snippets/                       # 代码片段\r\n├── config/                         # 配置文件\r\n├── media/                          # 图标和媒体资源\r\n├── 项目文档/                       # 中文项目文档\r\n├── dist/                           # 构建输出目录\r\n├── node_modules/                   # 依赖包\r\n├── package.json                    # 扩展清单\r\n├── tsconfig.json                   # TypeScript配置\r\n├── jest.config.js                  # 测试配置\r\n├── esbuild.mjs                     # 构建配置\r\n├── CLAUDE.md                       # Claude使用指南\r\n└── README.md                       # 项目文档\r\n```\r\n\r\n## Naming Conventions\r\n\r\n### Files\r\n- **Provider模块**: `PascalCase` + `Provider` 后缀 (例: `CompletionProvider.ts`)\r\n- **Manager类**: `PascalCase` + `Manager` 后缀 (例: `ASTManager.ts`, `MacroManager.ts`)\r\n- **Collector类**: `PascalCase` + `Collector` 后缀 (例: `UnusedVariableCollector.ts`)\r\n- **Utility模块**: `camelCase` + 功能描述 (例: `javaDocProcessor.ts`, `functionUtils.ts`)\r\n- **Core功能**: `camelCase` 描述性名称 (例: `diagnostics.ts`, `extension.ts`)\r\n- **Test文件**: `[filename].test.ts` 或 `[filename].spec.ts`\r\n\r\n### Code\r\n- **Classes/Interfaces**: `PascalCase` (例: `LPCDiagnostics`, `SymbolTable`, `FormattingOptions`)\r\n- **Functions/Methods**: `camelCase` (例: `analyzeDocument`, `getParseTree`, `formatCode`)\r\n- **Constants**: `UPPER_SNAKE_CASE` (例: `DEFAULT_CONFIG`, `MAX_CACHE_SIZE`)\r\n- **Variables**: `camelCase` (例: `documentUri`, `parseResult`, `configManager`)\r\n- **Private Members**: `_` 前缀 + `camelCase` (例: `_parseCache`, `_errorListener`)\r\n\r\n## Import Patterns\r\n\r\n### Import Order\r\n```typescript\r\n// 1. Node.js内置模块\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\n// 2. 外部依赖\r\nimport * as vscode from 'vscode';\r\nimport { CharStreams, CommonTokenStream } from 'antlr4ts';\r\nimport axios from 'axios';\r\n\r\n// 3. 项目内部模块 (按层级分组)\r\nimport { LPCLexer } from './antlr/LPCLexer';\r\nimport { ASTManager } from './ast/astManager';\r\nimport { MacroManager } from './macroManager';\r\n\r\n// 4. 相对路径导入\r\nimport { DebugErrorListener } from '../parser/DebugErrorListener';\r\nimport { FormattingUtils } from './FormattingUtils';\r\n\r\n// 5. 类型导入 (单独分组)\r\nimport type { SymbolType } from './types';\r\nimport type { ParseResult } from './ast/astManager';\r\n```\r\n\r\n### Module Organization\r\n- **绝对导入**: 从`src`根目录开始的绝对路径 (配置baseUrl)\r\n- **相对导入**: 同目录或相近模块间使用相对路径\r\n- **类型导入**: 使用`type`关键字明确标识类型导入\r\n- **命名导入**: 优先使用具名导入而非默认导入\r\n\r\n## Code Structure Patterns\r\n\r\n### Module/Class Organization\r\n```typescript\r\n// 1. 导入声明\r\nimport statements...\r\n\r\n// 2. 类型定义和接口\r\ninterface LocalInterface { ... }\r\ntype LocalType = ...\r\n\r\n// 3. 常量和配置\r\nconst DEFAULT_OPTIONS = { ... };\r\nconst MAX_RETRIES = 3;\r\n\r\n// 4. 主要类实现\r\nexport class MainClass {\r\n    // 私有字段\r\n    private _field: Type;\r\n\r\n    // 构造函数\r\n    constructor() { ... }\r\n\r\n    // 公共方法 (按功能分组)\r\n    public publicMethod(): ReturnType { ... }\r\n\r\n    // 私有方法\r\n    private _privateMethod(): void { ... }\r\n}\r\n\r\n// 5. 辅助函数\r\nfunction helperFunction(): void { ... }\r\n\r\n// 6. 导出声明\r\nexport { HelperClass, utilityFunction };\r\n```\r\n\r\n### Function/Method Organization\r\n```typescript\r\nfunction exampleMethod(param: Type): ReturnType {\r\n    // 1. 输入验证\r\n    if (!param) {\r\n        throw new Error('Invalid parameter');\r\n    }\r\n\r\n    // 2. 变量声明\r\n    let result: ReturnType;\r\n    const config = getConfig();\r\n\r\n    // 3. 核心逻辑\r\n    try {\r\n        result = processData(param, config);\r\n        return result;\r\n    } catch (error) {\r\n        // 4. 错误处理\r\n        handleError(error);\r\n        throw error;\r\n    }\r\n}\r\n```\r\n\r\n### File Organization Principles\r\n- **单一职责**: 每个文件专注一个核心功能或类\r\n- **Provider模式**: VS Code功能提供者独立文件\r\n- **Manager模式**: 复杂功能的管理器单独文件\r\n- **分层架构**: 按功能层次组织目录结构\r\n\r\n## Code Organization Principles\r\n\r\n1. **Single Responsibility**: 每个文件、类、函数都有明确的单一职责\r\n   - `diagnostics.ts` 专注错误诊断\r\n   - `completionProvider.ts` 专注代码补全\r\n   - `astManager.ts` 专注AST管理\r\n\r\n2. **Modularity**: 代码按功能模块化组织，支持独立开发和测试\r\n   - `collectors/` 目录包含各种代码分析收集器\r\n   - `parser/` 目录包含解析相关工具\r\n   - `utils/` 目录包含通用工具函数\r\n\r\n3. **Testability**: 结构设计便于单元测试和集成测试\r\n   - 依赖注入模式 (Manager通过构造函数接收依赖)\r\n   - 接口抽象 (Provider实现VS Code接口)\r\n   - 纯函数工具类 (utils中的函数无副作用)\r\n\r\n4. **Consistency**: 遵循项目既定模式和VS Code扩展最佳实践\r\n   - 统一的Provider注册模式\r\n   - 一致的错误处理方式\r\n   - 标准的配置管理模式\r\n\r\n## Module Boundaries\r\n\r\n### 核心架构层次\r\n```\r\n┌─────────────────────────────────────┐\r\n│        VS Code Extension API        │  # VS Code集成层\r\n├─────────────────────────────────────┤\r\n│         Provider Layer              │  # 功能提供者层\r\n│  (Completion, Diagnostics, etc.)    │\r\n├─────────────────────────────────────┤\r\n│         Business Logic Layer        │  # 业务逻辑层\r\n│   (AST Manager, Collectors, etc.)   │\r\n├─────────────────────────────────────┤\r\n│         Parser Layer               │  # 解析器层\r\n│      (ANTLR4, Symbol Table)        │\r\n├─────────────────────────────────────┤\r\n│         Utility Layer              │  # 工具层\r\n│    (Utils, Types, Configuration)   │\r\n└─────────────────────────────────────┘\r\n```\r\n\r\n### 依赖规则\r\n- **向下依赖**: 上层可以依赖下层，下层不能依赖上层\r\n- **水平隔离**: 同层模块间通过接口交互，避免直接依赖\r\n- **Provider隔离**: 各Provider相互独立，通过共享服务交互\r\n- **工具无状态**: Utils层函数保持无状态，可被任意层安全调用\r\n\r\n### 边界定义\r\n- **VS Code API vs 内部实现**: 仅在Provider层访问VS Code API\r\n- **核心功能 vs 扩展功能**: 核心解析功能与可选功能分离\r\n- **同步 vs 异步**: 明确异步边界，避免阻塞操作\r\n- **缓存 vs 实时**: 缓存层与实时计算层分离\r\n\r\n## Code Size Guidelines\r\n\r\n### 文件大小限制\r\n- **Provider文件**: 建议 < 500行 (复杂Provider可达800行)\r\n- **Manager文件**: 建议 < 400行\r\n- **Utility文件**: 建议 < 300行\r\n- **类型定义文件**: 建议 < 200行\r\n\r\n### 函数/方法大小\r\n- **公共方法**: 建议 < 50行，最大不超过100行\r\n- **私有方法**: 建议 < 30行\r\n- **工具函数**: 建议 < 20行\r\n- **复杂逻辑**: 超过限制时应拆分为多个辅助函数\r\n\r\n### 类/接口复杂度\r\n- **类的方法数**: 建议 < 20个公共方法\r\n- **接口属性数**: 建议 < 15个属性\r\n- **参数个数**: 函数参数建议 < 5个，超过时使用配置对象\r\n- **嵌套深度**: 最大嵌套级别 < 4层\r\n\r\n## Extension-Specific Structure\r\n\r\n### Provider Registration Pattern\r\n```typescript\r\n// extension.ts - 统一注册模式\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    // 初始化核心服务\r\n    const astManager = ASTManager.getInstance();\r\n    const configManager = new LPCConfigManager();\r\n\r\n    // 注册Provider\r\n    context.subscriptions.push(\r\n        vscode.languages.registerCompletionItemProvider(\r\n            'lpc',\r\n            new LPCCompletionItemProvider(astManager),\r\n            '.'\r\n        )\r\n    );\r\n}\r\n```\r\n\r\n### Configuration Management\r\n```typescript\r\n// 配置分层管理\r\n├── package.json             # VS Code配置声明\r\n├── config/lpc-config.json   # 默认配置文件\r\n└── src/config.ts            # 配置管理器\r\n```\r\n\r\n### Testing Structure\r\n```\r\ntests/\r\n├── unit/                    # 单元测试\r\n│   ├── ast/                 # AST相关测试\r\n│   ├── collectors/          # 收集器测试\r\n│   └── utils/               # 工具函数测试\r\n├── integration/             # 集成测试\r\n│   ├── providers/           # Provider集成测试\r\n│   └── workflows/           # 完整工作流测试\r\n└── fixtures/                # 测试数据\r\n    ├── lpc-samples/         # 示例LPC文件\r\n    └── expected-outputs/    # 预期输出\r\n```\r\n\r\n## Documentation Standards\r\n\r\n### 代码文档要求\r\n- **所有公共API**: 必须有TSDoc注释\r\n- **复杂算法**: 内联注释解释关键步骤\r\n- **Provider实现**: 注释说明VS Code集成要点\r\n- **配置选项**: 详细说明每个配置项的作用\r\n\r\n### 文档组织\r\n- **README.md**: 用户使用指南和功能介绍\r\n- **CHANGELOG.md**: 版本更新记录\r\n- **CLAUDE.md**: 开发指南和项目规则\r\n- **项目文档/**: 中文详细技术文档\r\n- **JSDoc**: API文档自动生成\r\n\r\n### 注释风格\r\n```typescript\r\n/**\r\n * 解析LPC文档并构建符号表\r\n * @param document VS Code文档对象\r\n * @param options 解析选项配置\r\n * @returns 解析结果包含AST和符号表\r\n * @throws {ParseError} 当语法错误无法恢复时抛出\r\n */\r\npublic parseDocument(document: vscode.TextDocument, options?: ParseOptions): ParseResult {\r\n    // 实现细节...\r\n}\r\n```\r\n\r\n这种结构设计确保了代码的可维护性、可测试性和可扩展性，同时与VS Code扩展的最佳实践保持一致。",
  "fileStats": {
    "size": 11842,
    "lines": 308,
    "lastModified": "2025-09-24T13:54:54.747Z"
  },
  "comments": []
}