{
  "id": "snapshot_1758721246016_v3mzejslr",
  "approvalId": "approval_1758721246013_kie7l1hiw",
  "approvalTitle": "LPC Code Formatter Design Document",
  "version": 1,
  "timestamp": "2025-09-24T13:40:46.016Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document: LPC Code Formatter\r\n\r\n## Overview\r\n\r\nLPC Code Formatter是一个专为LPC语言设计的代码格式化工具，集成到现有的LPC Support VS Code扩展中。该工具利用现有的ANTLR4语法解析器基础设施，提供智能的代码格式化功能，支持LPC语言的独特语法特性，如函数指针、映射类型、foreach循环、范围匹配等。\r\n\r\n格式化器采用访问者模式遍历抽象语法树(AST)，应用预定义的格式化规则，生成符合编码规范的代码输出。\r\n\r\n## Steering Document Alignment\r\n\r\n### Technical Standards (tech.md)\r\n- 遵循项目的TypeScript严格模式和模块化架构\r\n- 使用现有的ANTLR4解析器基础设施\r\n- 保持与VS Code扩展架构的一致性\r\n- 采用单一职责原则设计各个组件\r\n\r\n### Project Structure (structure.md)\r\n- 将格式化功能集成到src目录结构中\r\n- 遵循现有的provider模式（如CompletionProvider、DiagnosticsProvider等）\r\n- 利用现有的AST管理和缓存机制\r\n- 保持与其他语言服务功能的协调性\r\n\r\n## Code Reuse Analysis\r\n\r\n### Existing Components to Leverage\r\n- **ASTManager**: 复用现有的AST解析和缓存机制，避免重复解析\r\n- **LPCParser/LPCLexer**: 使用ANTLR4生成的语法解析器进行语法树构建\r\n- **ConfigManager**: 复用配置管理系统用于格式化选项配置\r\n- **ErrorListener**: 复用错误处理机制用于格式化过程中的错误管理\r\n- **DebounceUtil**: 复用防抖功能用于实时格式化场景\r\n\r\n### Integration Points\r\n- **VS Code Language Server Protocol**: 通过DocumentFormattingProvider和DocumentRangeFormattingProvider集成\r\n- **Extension Activation**: 在extension.ts中注册格式化provider\r\n- **Configuration System**: 与VS Code settings系统集成，提供用户可配置的格式化选项\r\n- **Parse Cache**: 与现有的parseCache系统集成，提高性能\r\n\r\n## Architecture\r\n\r\n格式化系统采用分层架构，将格式化逻辑分解为独立的、可测试的组件：\r\n\r\n### Modular Design Principles\r\n- **Single File Responsibility**: 每个文件专注一个特定的格式化功能领域\r\n- **Component Isolation**: 格式化规则、访问者、配置管理分离实现\r\n- **Service Layer Separation**: 将格式化逻辑、配置管理、VS Code集成分层处理\r\n- **Utility Modularity**: 通用格式化工具函数独立模块化\r\n\r\n```mermaid\r\ngraph TD\r\n    A[VS Code Editor] -->|Format Document| B[LPCDocumentFormattingProvider]\r\n    A -->|Format Selection| C[LPCDocumentRangeFormattingProvider]\r\n\r\n    B --> D[LPCFormatter]\r\n    C --> D[LPCFormatter]\r\n\r\n    D --> E[ASTManager - Existing]\r\n    D --> F[FormatterConfigManager]\r\n    D --> G[FormattingVisitor]\r\n\r\n    G --> H[IndentationFormatter]\r\n    G --> I[SpacingFormatter]\r\n    G --> J[LPCSpecificFormatter]\r\n    G --> K[BlockFormatter]\r\n\r\n    F --> L[VS Code Configuration]\r\n    E --> M[ANTLR4 Parser - Existing]\r\n\r\n    H --> N[FormattingUtils]\r\n    I --> N\r\n    J --> N\r\n    K --> N\r\n\r\n    style E fill:#e1f5fe\r\n    style M fill:#e1f5fe\r\n    style L fill:#f3e5f5\r\n```\r\n\r\n## Components and Interfaces\r\n\r\n### LPCDocumentFormattingProvider\r\n- **Purpose:** VS Code DocumentFormattingProvider接口实现，处理整个文档格式化\r\n- **Interfaces:**\r\n  - `provideDocumentFormattingEdits(document: vscode.TextDocument, options: vscode.FormattingOptions): vscode.TextEdit[]`\r\n- **Dependencies:** LPCFormatter\r\n- **Reuses:** VS Code API标准接口\r\n\r\n### LPCDocumentRangeFormattingProvider\r\n- **Purpose:** VS Code DocumentRangeFormattingProvider接口实现，处理选定范围格式化\r\n- **Interfaces:**\r\n  - `provideDocumentRangeFormattingEdits(document: vscode.TextDocument, range: vscode.Range, options: vscode.FormattingOptions): vscode.TextEdit[]`\r\n- **Dependencies:** LPCFormatter\r\n- **Reuses:** VS Code API标准接口\r\n\r\n### LPCFormatter\r\n- **Purpose:** 核心格式化引擎，协调各种格式化操作\r\n- **Interfaces:**\r\n  - `formatDocument(document: vscode.TextDocument, options: FormattingOptions): Promise<vscode.TextEdit[]>`\r\n  - `formatRange(document: vscode.TextDocument, range: vscode.Range, options: FormattingOptions): Promise<vscode.TextEdit[]>`\r\n- **Dependencies:** ASTManager, FormatterConfigManager, FormattingVisitor\r\n- **Reuses:** 现有的ASTManager和错误处理机制\r\n\r\n### FormattingVisitor\r\n- **Purpose:** AST访问者，遍历语法树并应用格式化规则\r\n- **Interfaces:**\r\n  - `visit(node: ParseTree): FormattedResult`\r\n  - `visitChildren(node: RuleNode): FormattedResult`\r\n- **Dependencies:** IndentationFormatter, SpacingFormatter, LPCSpecificFormatter, BlockFormatter\r\n- **Reuses:** ANTLR4 Visitor模式\r\n\r\n### IndentationFormatter\r\n- **Purpose:** 处理代码缩进格式化\r\n- **Interfaces:**\r\n  - `formatIndentation(node: ParseTree, currentLevel: number): string`\r\n  - `calculateIndentLevel(node: ParseTree): number`\r\n- **Dependencies:** FormattingUtils\r\n- **Reuses:** 通用缩进计算逻辑\r\n\r\n### SpacingFormatter\r\n- **Purpose:** 处理空格和操作符周围的间距\r\n- **Interfaces:**\r\n  - `formatOperatorSpacing(node: ParseTree): string`\r\n  - `formatPunctuationSpacing(node: ParseTree): string`\r\n- **Dependencies:** FormattingUtils\r\n- **Reuses:** 标准空格处理规则\r\n\r\n### LPCSpecificFormatter\r\n- **Purpose:** 处理LPC特有语法的格式化（函数指针、mapping、foreach等）\r\n- **Interfaces:**\r\n  - `formatFunctionPointer(node: ParseTree): string`\r\n  - `formatMapping(node: ParseTree): string`\r\n  - `formatForeach(node: ParseTree): string`\r\n  - `formatRangeCase(node: ParseTree): string`\r\n- **Dependencies:** FormattingUtils\r\n- **Reuses:** LPC语法特性识别逻辑\r\n\r\n### BlockFormatter\r\n- **Purpose:** 处理代码块和大括号格式化\r\n- **Interfaces:**\r\n  - `formatBlock(node: ParseTree): string`\r\n  - `formatBraceStyle(node: ParseTree, style: BraceStyle): string`\r\n- **Dependencies:** FormattingUtils\r\n- **Reuses:** 标准块格式化模式\r\n\r\n### FormatterConfigManager\r\n- **Purpose:** 管理格式化配置选项\r\n- **Interfaces:**\r\n  - `getFormattingOptions(): FormattingOptions`\r\n  - `updateConfig(key: string, value: any): void`\r\n- **Dependencies:** VS Code Configuration API\r\n- **Reuses:** 现有的ConfigManager模式\r\n\r\n### FormattingUtils\r\n- **Purpose:** 通用格式化工具函数集合\r\n- **Interfaces:**\r\n  - `normalizeWhitespace(text: string): string`\r\n  - `preserveComments(original: string, formatted: string): string`\r\n  - `calculateTextEdits(original: string, formatted: string): vscode.TextEdit[]`\r\n- **Dependencies:** 无\r\n- **Reuses:** 标准字符串处理工具\r\n\r\n## Data Models\r\n\r\n### FormattingOptions\r\n```typescript\r\ninterface FormattingOptions extends vscode.FormattingOptions {\r\n  // 继承VS Code标准选项: insertSpaces, tabSize\r\n\r\n  // LPC特定选项\r\n  braceStyle: 'allman' | 'k&r' | 'gnu' | 'whitesmiths';\r\n  spacesAroundOperators: boolean;\r\n  spacesInsideParentheses: boolean;\r\n  spacesInsideBrackets: boolean;\r\n  alignMappingValues: boolean;\r\n  preserveArrayFormatting: boolean;\r\n  maxLineLength: number;\r\n  indentSwitchCase: boolean;\r\n  alignParameters: boolean;\r\n}\r\n```\r\n\r\n### FormattedResult\r\n```typescript\r\ninterface FormattedResult {\r\n  text: string;\r\n  range: vscode.Range;\r\n  preserveLeadingWhitespace: boolean;\r\n  preserveTrailingWhitespace: boolean;\r\n}\r\n```\r\n\r\n### BraceStyle\r\n```typescript\r\nenum BraceStyle {\r\n  Allman = 'allman',        // 大括号换行\r\n  KAndR = 'k&r',           // 大括号不换行\r\n  GNU = 'gnu',             // GNU风格\r\n  Whitesmiths = 'whitesmiths' // Whitesmiths风格\r\n}\r\n```\r\n\r\n## Error Handling\r\n\r\n### Error Scenarios\r\n1. **语法解析错误:** 当代码包含语法错误时\r\n   - **Handling:** 捕获解析异常，记录错误位置，对可解析部分进行格式化\r\n   - **User Impact:** 显示错误信息，保持原始代码不变的区域高亮显示\r\n\r\n2. **格式化配置无效:** 当用户配置包含无效选项时\r\n   - **Handling:** 使用默认配置值，记录警告日志\r\n   - **User Impact:** 显示配置警告，使用默认格式化规则\r\n\r\n3. **大文件处理超时:** 当处理超大文件时\r\n   - **Handling:** 设置处理超时限制，分块处理大文件\r\n   - **User Impact:** 显示处理进度，允许用户取消操作\r\n\r\n4. **内存不足:** 当处理超大文件导致内存问题时\r\n   - **Handling:** 实施内存监控，启用流式处理模式\r\n   - **User Impact:** 显示内存警告，建议分批处理\r\n\r\n## Testing Strategy\r\n\r\n### Unit Testing\r\n- **格式化规则测试:** 测试各种语法结构的格式化输出\r\n- **配置管理测试:** 测试不同配置选项的正确应用\r\n- **边界情况测试:** 测试空文件、超大文件、特殊字符等边界情况\r\n- **LPC特殊语法测试:** 测试函数指针、映射、foreach等LPC特有语法\r\n\r\n### Integration Testing\r\n- **VS Code集成测试:** 测试与VS Code编辑器的集成功能\r\n- **AST管理器集成测试:** 测试与现有AST解析系统的协作\r\n- **配置系统集成测试:** 测试与VS Code设置系统的集成\r\n- **性能测试:** 测试格式化性能和内存使用\r\n\r\n### End-to-End Testing\r\n- **完整格式化流程测试:** 从用户触发到格式化完成的完整流程\r\n- **多文件项目测试:** 测试在实际LPC项目中的格式化效果\r\n- **用户体验测试:** 测试格式化速度、错误恢复、配置便利性等用户体验\r\n- **回归测试:** 确保格式化结果的一致性和幂等性",
  "fileStats": {
    "size": 9453,
    "lines": 238,
    "lastModified": "2025-09-24T13:40:37.291Z"
  },
  "comments": []
}